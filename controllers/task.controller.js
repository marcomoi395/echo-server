const Task = require('../models/task.model');
const mongoose = require('mongoose');
const moment = require('moment-timezone');

//GET /
const index = async (req, res) => {
    try {
        const status = req.query.status;
        const userId = req.userId
        const find = {
            deleted: false,
            userId: userId
        };

        if (status !== undefined) {
            find.status = status;
        }

        const records = await Task.find(find);

        res.status(200).json(records);
    } catch (e) {
        res.status(500).json({status: 500, message: e.message});
    }
}

// GET /detail/:id
const detail = async (req, res) => {
    try {
        const id = req.params.id;
        const userId = req.userId

        // Validate if the id is a valid MongoDB ObjectId
        if (!mongoose.Types.ObjectId.isValid(id)) {
            return res.status(400).json({status: 400, message: 'Invalid task ID'});
        }

        const record = await Task.findOne({
            deleted: false,
            _id: id,
            userId: userId
        });

        // Check if the record was found
        if (!record) {
            return res.status(404).json({status: 404, message: 'Task not found'});
        }

        res.status(200).json(record);
    } catch (e) {
        res.status(500).json({status: 500, message: e.message});
    }
}

// POST /add
const add = async (req, res) => {
    try {
        const data = req.body;

        // Add userId for task
        data.userId = req.userId

        // Convert dueDate to the correct timezone and format
        data.dueDate = moment.tz(data.dueDate, "DD/MM/YYYY", "Asia/Ho_Chi_Minh").toDate();


        const newRecord = new Task(data);
        await newRecord.save();

        /*
         * Send the newly created task record as a JSON response
         *
         * - The response will include all the fields of the Task model, such as:
         *   - _id: the unique identifier automatically generated by MongoDB
         *   - title: the title of the task
         *   - description: the detailed description of the task
         *   - dueDate: the due date of the task, which has been converted to a Date object
         *   - any other fields defined in the Task model
         *
         * Example of the JSON response:
         * {
         *   "_id": "60c72b2f4f1a2c001c8e4f70",
         *   "title": "Complete assignment",
         *   "description": "Finish the math assignment by next week",
         *   "dueDate": "2024-08-01T00:00:00.000Z",
         *   "createdAt": "2024-07-28T12:34:56.789Z",
         *   "updatedAt": "2024-07-28T12:34:56.789Z",
         *   "__v": 0
         * }
         */

        res.status(201).json({
            message: "Task created successfully",
            task: newRecord
        });
    } catch (e) {
        res.status(500).json({status: 500, message: e.message});
    }
}

// PATCH /edit
const update = async (req, res) => {
    try {
        const id = req.params.id;
        const data = req.body;
        const userId = req.userId

        // Convert the dueDate from the provided format to a Date object in the desired timezone
        if (data.dueDate) {
            data.dueDate = moment.tz(data.dueDate, "DD/MM/YYYY", "Asia/Ho_Chi_Minh").toDate();
        }

        const result = await Task.updateOne({
            deleted: false,
            _id: id,
            userId: userId,
        }, data);

        // Check if any documents were modified
        if (result.modifiedCount === 0) {
            return res.status(404).json({error: 'Task not found or no changes detected.'});
        }

        res.status(200).json({status: 200, message: 'Task updated successfully'});
    } catch (e) {
        res.status(500).json({status: 500, message: e.message});
    }
}

// PATCH /delele
const remove = async (req, res) => {
    try {
        const {id} = req.body;
        const userId = req.userId

        const result = await Task.updateOne({
            deleted: false,
            _id: id,
            userId: userId,
        }, {deleted: true, deletedAt: new Date()});

        // Check if any documents were modified
        if (result.modifiedCount === 0) {
            return res.status(404).json({error: 'Task not found or no changes detected.'});
        }

        res.status(200).json({status: 200, message: 'Task deleted successfully'});
    } catch (e) {
        res.status(500).json({status: 500, message: e.message});
    }
}

// PATCH /change-status
const changeStatus = async (req, res) => {
    try {
        const {id, status} = req.body;
        const userId = req.userId

        const result = await Task.updateOne({
            deleted: false,
            _id: id,
            userId: userId
        }, {status: status});

        // Check if any documents were modified
        if (result.modifiedCount === 0) {
            return res.status(404).json({error: 'Task not found or no changes detected.'});
        }

        res.status(200).json({status: 200, message: 'Task updated successfully'});
    } catch (e) {
        res.status(500).json({status: 500, message: e.message});
    }
}


module.exports = {index, detail, add, update, remove, changeStatus}